name: build_ami
run-name: Build AMI during merge
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-ami:
    if: github.repository == 'neu-ramya/webapp'
    runs-on: ubuntu-latest
    environment: Actions-CI
    env:
      DB_CONNECTION: mysql
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_DATABASE: ${{ vars.DB_DATABASE }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ vars.DB_PASS }}
      PROF_TABLES: ${{ vars.PROF_TABLES }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: create tmp env file
        run: |
          ls -al
          touch .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_DATABASE=$DB_DATABASE" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASS=$DB_PASS" >> .env
          echo "PROF_TABLES=$PROF_TABLES" >> .env
          cat .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install

      - name: Setup mariadb action
        uses: ankane/setup-mariadb@v1
        with:
          database: webapp
      
      - name: Show database
        run: mysql -e 'SHOW DATABASES;'
        
      - name: set root user DB password
        run: mysql -D mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root'";

      - name: flush privileges
        run: mysql -D mysql -e "flush privileges";

      - name: Start Express.js Server
        run: |
          npm run ci

      - name: run integration tests
        uses: matt-ball/newman-action@master
        with:
          collection: tests/integration-tests/Webapp-latest.postman_collection.json
      
      - name: build zip artifact
        run: |
          sudo apt install zip -y
          zip -r ./packer/target/webapp.zip app config tests server.js package.json .env node_modules package-lock.json
          ls -al ./packer/target/
          unzip ./packer/target/webapp.zip -d ./packer/target

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/aws-debian.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: "packer build -var \"aws_access_key=${AWS_ACCESS_KEY_ID}\" -var \"aws_secret_key=${AWS_SECRET_ACCESS_KEY}\" ./packer/aws-debian.pkr.hcl"
  refresh-instances:
    needs: build-and-deploy-ami
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1"

    - name: Wait for instance refresh to complete
      id: wait-for-instance-refresh
      run: |
        latest_shared_ami_id=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws \
          ec2 describe-images \
          --owners 042487768049 \
          --executable-users self \
          --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
          --output text)
        echo "AMI ID $latest_shared_ami_id"

        launch_template_name_prefix="csye-6225-launch-template"

        latest_launch_template_id=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} \
          aws ec2 describe-launch-templates \
          --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' \
          --output text)
        echo "Launch Template ID - $latest_launch_template_id"

        latest_version=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws ec2 describe-launch-templates \
          --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LatestVersionNumber' \
          --output text)
 
        echo "Latest Launch template version -  $latest_version"

        new_version=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
        AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws \
          ec2 create-launch-template-version \
          --launch-template-id $latest_launch_template_id \
          --version-description "New version with AMI ID" \
          --source-version $latest_version \
          --launch-template-data '{"ImageId":"'"$latest_shared_ami_id"'"}' --output text \
          --query 'LaunchTemplateVersion.VersionNumber')

        echo "New Launch Template version created: $new_version"

        echo "Latest version of Launch Template $latest_launch_template_id: $latest_version"
        auto_scaling_group_name=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws \
          autoscaling describe-auto-scaling-groups --query \
          'AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateId, `'$latest_launch_template_id'`)].AutoScalingGroupName' --output text)
        
        AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} \
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $auto_scaling_group_name \
          --launch-template "LaunchTemplateId=$latest_launch_template_id,Version=$new_version"  

        # Issue the instance refresh command
        refresh_status=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
            AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws autoscaling \
            describe-instance-refreshes --auto-scaling-group-name \
            $auto_scaling_group_name --query 'InstanceRefreshes[0].Status')
            
        echo "Refresh status : $refresh_status"
        if[ "$refresh_status" != "\"InProgress\""]; then
        AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
          AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws \
          autoscaling start-instance-refresh --auto-scaling-group-name $auto_scaling_group_name \
          --preferences "MinHealthyPercentage=100" --output text --query 'InstanceRefreshes[0].Status'
        fi

        while [ "$refresh_status" != "Successful" ]; do
          refresh_status=$(AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}  \
            AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }} aws autoscaling \
            describe-instance-refreshes --auto-scaling-group-name \
            $auto_scaling_group_name --query 'InstanceRefreshes[0].Status')
          echo $refresh_status
          sleep 10
        done

        echo "Instance refresh status: $refresh_status"
        echo "::set-output name=instance_refresh_status::$refresh_status"
