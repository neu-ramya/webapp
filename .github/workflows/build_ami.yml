name: build_ami
run-name: Build AMI during merge
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-ami:
    if: github.repository == 'neu-ramya/webapp'
    runs-on: ubuntu-latest
    environment: Actions-CI
    env:
      DB_CONNECTION: mysql
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_DATABASE: ${{ vars.DB_DATABASE }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ vars.DB_PASS }}
      PROF_TABLES: ${{ vars.PROF_TABLES }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: create tmp env file
        run: |
          ls -al
          touch .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_DATABASE=$DB_DATABASE" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASS=$DB_PASS" >> .env
          echo "PROF_TABLES=$PROF_TABLES" >> .env
          cat .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install

      - name: Setup mariadb action
        uses: ankane/setup-mariadb@v1
        with:
          database: webapp
      
      - name: Show database
        run: mysql -e 'SHOW DATABASES;'
        
      - name: set root user DB password
        run: mysql -D mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root'";

      - name: flush privileges
        run: mysql -D mysql -e "flush privileges";

      - name: Start Express.js Server
        run: |
          npm run ci

      - name: run integration tests
        uses: matt-ball/newman-action@master
        with:
          collection: tests/integration-tests/Webapp-latest.postman_collection.json
      
      - name: build zip artifact
        run: |
          sudo apt install zip -y
          zip -r ./packer/target/webapp.zip app config tests server.js package.json .env node_modules package-lock.json
          ls -al ./packer/target/
          unzip ./packer/target/webapp.zip -d ./packer/target

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/aws-debian.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: "packer build -var \"aws_access_key=${AWS_ACCESS_KEY_ID}\" -var \"aws_secret_key=${AWS_SECRET_ACCESS_KEY}\" ./packer/aws-debian.pkr.hcl"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get the latest AMI ID
        id: get-ami-id
        run: |
          latest_ami_id=$(aws ec2 describe-images --owners self --query 'Images | [0].ImageId' --output text)
          echo "Latest AMI ID: $latest_ami_id"
          echo "::set-output name=ami_id::$latest_ami_id"

      - name: Create new Launch Template
        id: create-launch-template
        run: |
          launch_template_name="csye-webapp-lt"
          ami_id=${{ steps.get-ami-id.outputs.ami_id }}

          launch_template_id=$(aws ec2 create-launch-template \
            --launch-template-name $launch_template_name \
            --version-description "Initial version with latest AMI" \
            --version-number 1 \
            --version-specification "DefaultVersion=Yes,DefaultVersionNumber=1" \
            --block-device-mappings "DeviceName=/dev/xvda,Ebs={VolumeSize=8,VolumeType=gp2,DeleteOnTermination=true}" \
            --image-id $ami_id \
            --output text --query 'LaunchTemplate.LaunchTemplateId')

          echo "New Launch Template created with ID: $launch_template_id"
          echo "::set-output name=launch_template_id::$launch_template_id"

      - name: Update Auto Scaling Group
        id: update-auto-scaling-group
        run: |
          auto_scaling_group_name="csye-webapp-asg-name"
          launch_template_id=${{ steps.create-launch-template.outputs.launch_template_id }}

          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $auto_scaling_group_name \
              --launch-template "LaunchTemplateId=$launch_template_id,Version=1"
  
  refresh-instances:
    needs: build-and-deploy-ami
    runs-on: ubuntu-latest

    steps:
    - name: Wait for instance refresh to complete
      id: wait-for-instance-refresh
      run: |
        auto_scaling_group_name="csye-webapp-asg-name"

        # Issue the instance refresh command
        refresh_status=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $auto_scaling_group_name \
          --preferences "MinHealthyPercentage=100" --output text --query 'InstanceRefreshes[0].Status')

        echo "Instance refresh status: $refresh_status"
        echo "::set-output name=instance_refresh_status::$refresh_status"

  finalize:
    needs: refresh-instances
    runs-on: ubuntu-latest
    steps:
    - name: Check instance refresh status
      run: |
        instance_refresh_status=${{ needs.refresh-instances.outputs.instance_refresh_status }}
        if [[ $instance_refresh_status == "Successful" ]]; then
          echo "Instance refresh completed successfully."
        else
          echo "Instance refresh failed. Check the AWS Management Console for details."
          exit 1
        fi